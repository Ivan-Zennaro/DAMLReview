module Main where

import DA.Date
import DA.List
import DA.Text

type DocumentId = ContractId Document
type ReviewId = ContractId DocumentReview

data ReviewState = OPEN | IN_REVIEW | APPROVED 
  deriving (Eq, Show)

template DocumentReview
  with
    requester: Party
    document: Document
    reviewer: Party
    expDate: Date
    note: Optional(Text)
    state: ReviewState
  where 
    signatory requester
    observer reviewer

    key (requester, document): (Party, Document)
    maintainer key._1

    -- Approve document
    choice Approve: Either (Text) (ReviewId)
      controller reviewer
      do
        nowTime <- getTime
        let now = toDateUTC nowTime

        if (now >= expDate) then
          return (Left "Expired")
        
        else do
          updatedReview <- create this with 
            requester
            document
            reviewer
            expDate
            note
            state = APPROVED
          return (Right updatedReview)

    -- Write a review with a comment 
    choice Review: Either (Text) (ReviewId)
      with 
        comment: Text 
      controller reviewer
      do
        nowTime <- getTime
        let now = toDateUTC nowTime

        if (now >= expDate) then
          return (Left "Expired")
        else do
          updatedReview <- create this with 
            requester
            document
            reviewer
            expDate
            note = Some (comment)
            state = IN_REVIEW
          return (Right updatedReview)

    -- Close the review
    choice Close: ()
      controller reviewer
      do
        archive self
    
    -- Get the status
    nonconsuming choice Status: ReviewState
      controller requester, reviewer
      do 
        return this.state
        

template Document
  with 
    owner: Party 
    name: Text
    content: Text
  where 
    signatory owner
    key (owner, name): (Party, Text)
    maintainer key._1

    ensure this.name /= "" &&  this.content /= ""

    -- Open a review for the current document
    nonconsuming choice OpenReview : ReviewId
      with
        reviewer: Party
        expDate: Date
      controller owner

      do
        create DocumentReview with
          requester = owner
          document = this
          reviewer 
          expDate
          note = None
          state = OPEN

    -- Change the content of the document and cancel related review (if present)
    choice ChangeContentAndCancelReviews : DocumentId
      with
        newContent: Text
      controller owner
      do
        newDocument <- create this with content = newContent
        maybeReviewId: Optional(ReviewId) <- lookupByKey @DocumentReview (owner, this)

        case maybeReviewId of
          None -> 
            return newDocument
          Some reviewId  -> do
             archive reviewId
             return newDocument

     -- Get # words in the content of the document
    nonconsuming choice GetContentLength : Int
      controller owner
      do
        let wordsLength = DA.List.length (filter (/= "") (DA.Text.words this.content))
        return wordsLength





