module Main where

type DocumentId = ContractId Document

data ReviewState = OPEN | IN_REVIEW | COMPLETED
  deriving (Eq, Show)


template DocumentReview
  with
    requester: Party
    document: Document
    reviewer: Party
    expDate: Date
    note: Optional(Text)
    state: ReviewState
  where 
    signatory requester
    observer reviewer

    key (requester, document): (Party, Document)
    maintainer key._1

    choice Approve: ()
      controller reviewer
      do 
        archive self
        return ()



template Document
  with 
    owner: Party 
    name: Text
    content: Text
    nApprovals: Int
  where 
    signatory owner
    key (owner, name): (Party, Text)
    maintainer key._1

    -- CHOICE: Open a review
    nonconsuming choice OpenReview : ContractId DocumentReview
      with
        reviewer: Party
        expDate: Date
      controller owner
      do
        create DocumentReview with
          requester = owner
          document = this
          reviewer 
          expDate
          note = None
          state = OPEN

    -- CHOICE Define a choice to change the content of the document and cancel related review if present
    choice ChangeContentAndCancelReviews : ContractId Document
      with
        newContent: Text
      controller owner
      do
        -- Create a copy of the current document with 0 approvals
        newDocument <- create this with content = newContent, nApprovals = 0
        -- Fetch all related DocumentReview contracts
        maybeReviewId: Optional(ContractId DocumentReview) <- lookupByKey @DocumentReview (owner, this)

        case maybeReviewId of
          None -> 
            return newDocument
          Some reviewId  -> do
             archive reviewId
             return newDocument



    


    





