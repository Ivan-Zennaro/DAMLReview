module Setup where

import Main
import DA.Date
import Daml.Script

data TestParties = TestParties with
    testRequester: Party
    testReviewer1: Party
    testReviewer2: Party

data TestDocuments = TestDocuments with
    testDoc1: DocumentId
    testDoc2: DocumentId

data TestReviews = TestReviews with
    testReview: ReviewId
    testReview2: ReviewId

setupTestParties : Script TestParties
setupTestParties = script do
    testRequester <- allocatePartyWithHint "Requester" (PartyIdHint "REQ")
    testReviewer1 <- allocatePartyWithHint "Reviewer1" (PartyIdHint "RV1")
    testReviewer2 <- allocatePartyWithHint "Reviewer2" (PartyIdHint "RV2")

    return TestParties with
        testRequester
        testReviewer1
        testReviewer2

setupReviews : Script (TestParties, TestDocuments, TestReviews)
setupReviews = script do
    (testParties@TestParties{..}) <- setupTestParties

    testDoc1 <- submit testRequester do
        createCmd Document with
            owner = testRequester
            name = "Doc1"
            content = "Content1"
    
    testDoc2 <- submit testRequester do
        createCmd Document with
            owner = testRequester
            name = "Doc2"
            content = "Content2"
    
    testReview <- submit testRequester do
        exerciseCmd testDoc1 OpenReview with
            reviewer = testReviewer1
            expDate = date 2027 Apr 10

    testReview2 <- submit testRequester do
        exerciseCmd testDoc2 OpenReview with
            reviewer = testReviewer2
            expDate = date 1000 Apr 10

    return (testParties, TestDocuments with {testDoc1, testDoc2}, TestReviews with {testReview, testReview2})

setupEnv : Script ()
setupEnv = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    reqId <- validateUserId "Alice"   
    rev1Id <- validateUserId "Prof_John"
    rev2Id <- validateUserId "Prof_Mike"

    createUser (User reqId (Some testRequester)) [CanActAs testRequester]  
    createUser (User rev1Id (Some testReviewer1)) [CanActAs testReviewer1]
    createUser (User rev2Id (Some testReviewer2)) [CanActAs testReviewer2]
    
    return ()