module Test where

import Main
import Setup
import DA.Date
import Daml.Script

testCantCreateAnotherReview : Script ()
testCantCreateAnotherReview = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    newReview <- submitMustFail testRequester do
        exerciseCmd testDoc1 OpenReview with
            reviewer = testReviewer2
            expDate = date 2023 Apr 10
    return ()


testChangeBasicTextDocument : Script ()
testChangeBasicTextDocument = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    submit testRequester do
        exerciseCmd testDoc2 ChangeContentAndCancelReviews 
            with
                newContent = "NewText"
    return ()

testChangeTextDocumentWithOpenReview : Script ()
testChangeTextDocumentWithOpenReview = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    submit testRequester do
        exerciseCmd testDoc1 ChangeContentAndCancelReviews 
            with
                newContent = "NewText"

    -- testReview has been archived
    submitMustFail testReviewer1 do
        exerciseCmd testReview Approve

    return ()

testDocumentApprovedInTime : Script ()
testDocumentApprovedInTime = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    res <- submit testReviewer1 do
        exerciseCmd testReview Approve 

    case res of
        Right contractId -> do
            maybeContract <- queryContractId testRequester contractId
            case maybeContract of 
                Some review -> do
                    debug $ review.state    
                    assert (review.state == APPROVED)
                None -> do 
                   fail "Fails: impossible to retrieve contract"
        Left text -> do
            fail "Fails: contract expired"
            
    return ()

testDocumentApprovedOutOfTime : Script ()
testDocumentApprovedOutOfTime = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    res <- submit testReviewer2 do
        exerciseCmd testReview2 Approve 

    case res of
        Right contractId -> do
            maybeContract <- queryContractId testRequester contractId
            fail "Contract is not expired as expected"
        Left text -> do
            debug "Contract is expired as expected"
            
    return ()

testDocumentInReviewInTime : Script ()
testDocumentInReviewInTime = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    res <- submit testReviewer1 do
        exerciseCmd testReview Review with
            comment = "Still work to do!"

    case res of
        Right contractId -> do
            maybeContract <- queryContractId testRequester contractId
            case maybeContract of 
                Some review -> do    
                    assert (review.state == IN_REVIEW)
                None -> do 
                   fail "Fails: impossible to retrieve contract"
        Left text -> do
            fail "Fails: contract expired"
            
    return ()

testDocumentInReviewOutOfTime : Script ()
testDocumentInReviewOutOfTime = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    res <- submit testReviewer2 do
        exerciseCmd testReview2 Review with
            comment = "Still work to do!"

    case res of
        Right contractId -> do
            maybeContract <- queryContractId testRequester contractId
            fail "Contract is not expired as expected"
        Left text -> do
            debug "Contract is expired as expected"
            
    return ()

testFailWhenWrongAprover : Script ()
testFailWhenWrongAprover = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    res <- submitMustFail testReviewer1 do
        exerciseCmd testReview2 Approve 
       
    return ()