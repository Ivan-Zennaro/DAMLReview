module Test where

import Main
import Setup
import DA.Date
import Daml.Script

testCreateNewReview = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    newReview <- submit testRequester do
        exerciseCmd testDoc2 OpenReview with
            reviewer = testReviewer2
            expDate = date 2023 Apr 10 
    return ()


testCantCreateAnotherReview = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    newReview <- submitMustFail testRequester do
        exerciseCmd testDoc1 OpenReview with
            reviewer = testReviewer2
            expDate = date 2023 Apr 10
    return ()


testChangeBasicTextDocument : Script ()
testChangeBasicTextDocument = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    submit testRequester do
        exerciseCmd testDoc2 ChangeContentAndCancelReviews 
            with
                newContent = "NewText"
    return ()

testChangeTextDocumentWithOpenReview : Script ()
testChangeTextDocumentWithOpenReview = script do
    (testParties@TestParties{..}, testDocuments@TestDocuments{..}, testReviews@TestReviews{..}) <- setupReviews

    submit testRequester do
        exerciseCmd testDoc1 ChangeContentAndCancelReviews 
            with
                newContent = "NewText"

    -- testReview has been archived
    submitMustFail testReviewer1 do
        exerciseCmd testReview Approve

    return ()

testDocumentInReview : Script ()
testDocumentInReview = script do
    return ()


testDocumentInReviewOutOfTime : Script ()
testDocumentInReviewOutOfTime = script do
    return ()


testDocumentApprovedInTime : Script ()
testDocumentInReview = script do
    return ()


testDocumentApprovedOutOfTime : Script ()
testDocumentInReview = script do
    return ()

